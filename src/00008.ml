exception Impossible of string

type value = {v:int;is_null:bool}
let char_to_int c = Char.code c - 48

let rec remove_top n lst acc =
  if n = 0 then lst,acc 
  else match lst with 
    |[] -> [],0 
    |{v=h;is_null=z}::q -> remove_top (n-1) q (acc*h)

let rec run nl l c r counter = 
  match nl,l with 
  |[],_ -> c
  |{v=v_1;is_null=z_1}::q,{v=v_2;is_null=z_2}::b -> let new_counter = counter + (if z_1 then 1 else 0) + (if z_2 then (-1) else 0) in
                  let new_r = r/v_2*v_1 in
                    run q b (max c (if new_counter=0 then new_r else 0)) new_r new_counter
  |_,_ -> raise (Impossible "cannot go here")

let rec prepare_lst acc = function
  |[] -> acc
  |'0'::q-> prepare_lst ({v=1;is_null=true}::acc) q
  |h::q ->prepare_lst ({v=char_to_int h;is_null=false}::acc) q

let func str n = 
  let lst = str |> String.to_seq |> List.of_seq |> prepare_lst [] |> List.rev in
    let new_lst,acc = remove_top n lst 1 in
      run new_lst lst acc acc 0

let input = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450" 
let _ =   
  Printf.printf "%d\n" (func input 13)